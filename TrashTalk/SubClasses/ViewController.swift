//
//  ViewController.swift
//  AV Foundation
//
//  Created by Pranjal Satija on 5/22/17.
//  Copyright Â© 2017 Pranjal Satija. All rights reserved.
//

import UIKit
import Photos
import Firebase

class ViewController: UIViewController {
    var trash: [String] = [
        "Take that",
        "Eat this",
        "Your move",
    ]

    @IBOutlet fileprivate var captureButton: UIButton!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var photoModeButton: UIButton!
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    
    ///Allows the user to put the camera in video mode.
    @IBOutlet fileprivate var videoModeButton: UIButton!
    let postImageView = UIImageView()
    
    let cameraController = CameraController()
    var confirmButton:UIButton!
    
    override var prefersStatusBarHidden: Bool { return true }
    
}

extension ViewController {
    override func viewDidLoad() {
        self.view.frame.size.height -= self.tabBarController!.tabBar.frame.size.height
//        confirmButton = captureButton.copy() as! UIButton
//        confirmButton.
        func configureCameraController() {
            cameraController.prepare {(error) in
                if let error = error {
                    print(error)
                }
                
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
            }
        }
        
        func styleCaptureButton() {
            captureButton.layer.borderColor = UIColor.black.cgColor
            captureButton.layer.borderWidth = 2
            
            captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
        }
        
        styleCaptureButton()
        configureCameraController()
        
    }
}

extension ViewController {
    @IBAction func toggleFlash(_ sender: UIButton) {
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
        }
            
        else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash On Icon"), for: .normal)
        }
    }
    
    @IBAction func switchCameras(_ sender: UIButton) {
        do {
            try cameraController.switchCameras()
        }
            
        catch {
            print(error)
        }
        
        switch cameraController.currentCameraPosition {
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
            
        case .none:
            return
        }
    }
    
    @IBAction func captureImage(_ sender: UIButton) {
        if(self.postImageView.image == nil){
            cameraController.captureImage {(image, error) in
                guard let image = image else {
                    print(error ?? "Image capture error")
                    return
                }
                self.postImageView.frame =  self.view.frame
                self.postImageView.image = image
                self.view.addSubview(self.postImageView)
                
            }
            let optionMenu = UIAlertController(title: nil, message: "Send Trash to Friends", preferredStyle: .actionSheet)
            let trash1 = UIAlertAction(title: trash[0], style: .default) { actionItem in
                self.pushToFriends(title: actionItem.title)
                self.postImageView.image = nil
                self.postImageView.removeFromSuperview()
            }
            let trash2 = UIAlertAction(title: trash[1], style: .default) { actionItem in
                self.pushToFriends(title: actionItem.title)
                self.postImageView.image = nil
                self.postImageView.removeFromSuperview()
            }
            let trash3 = UIAlertAction(title: trash[2], style: .default) { actionItem in
                self.pushToFriends(title: actionItem.title)
                self.postImageView.image = nil
                self.postImageView.removeFromSuperview()
            }
            optionMenu.addAction(trash1)
            optionMenu.addAction(trash2)
            optionMenu.addAction(trash3)
            self.present(optionMenu, animated: true, completion: nil)
        }
        
    }
    func pushToFriends(title: String?) {
        guard let user = Auth.auth().currentUser else { return }
        Firestore.firestore().query(collection: "users", by: "id", with: user.uid, of: User.self) { user in
            guard let user = user.first, let title = title else { return }
            
            let newNoti = Notification(title: "'\(title)' -\(user.name)", date: 35.0, id: UUID().uuidString, trashId: "7654")
            Firestore.firestore().save(object: newNoti, to: "notifications", with: newNoti.id) {
                self.dismiss(animated: true, completion: nil)
            }
        }
    }

    
}


